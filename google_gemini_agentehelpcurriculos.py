# -*- coding: utf-8 -*-
"""Google Gemini - AgenteHelpCurriculos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J5YuafZxKPyKe5tg5Hm3UtlwSkxEeYhS
"""

# Commented out IPython magic to ensure Python compatibility.
# IN√çCIO - SISTEMA AGENTE HELP CURR√çCULOS ################################################
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata, output

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')
output.enable_custom_widget_manager()

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk
!pip install -q ipycanvas

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
from ipycanvas import Canvas
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  #text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Cadastro de Curr√≠culo --- #
##########################################

def agente_cadastro_curriculo(info_nome,info_idade,info_endereco,info_email,
info_telefone,info_profissao,info_formacao,info_cursos,
info_experiencia_empresa1,info_experiencia_funcao1,info_experiencia_tempo1,
info_experiencia_empresa2,info_experiencia_funcao2,info_experiencia_tempo2,
info_experiencia_empresa3,info_experiencia_funcao3,info_experiencia_tempo3,
info_experiencia_empresa4,info_experiencia_funcao4, info_experiencia_tempo4,
info_experiencia_empresa5,info_experiencia_funcao5,info_experiencia_tempo5,
                              data_de_hoje):

    cadastro_curriculo = Agent(
        name="agente_cadastro_curriculo",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um assistente de pesquisa e cadastro de curr√≠culos.
        A sua tarefa √© pegar as informa√ß√µes abaixo:
        Nome: {info_nome}, Endere√ßo: {info_endereco}, email:{info_email},
        Telefone: {info_telefone}, Profiss√£o: {info_profissao}, Forma√ß√£o:{info_formacao},
        Cursos:{info_cursos},
        Experi√™ncia Profissional 1 na empresa: {info_experiencia_empresa1}
        com a fun√ß√£o de: {info_experiencia_funcao1} e no per√≠do de: {info_experiencia_tempo1}

        Experi√™ncia Profissional 2 na empresa: {info_experiencia_empresa2}
        com a fun√ß√£o de: {info_experiencia_funcao2} e no per√≠do de: {info_experiencia_tempo2}

        Experi√™ncia Profissional 3 na empresa: {info_experiencia_empresa3}
        com a fun√ß√£o de: {info_experiencia_funcao3} e no per√≠do de: {info_experiencia_tempo3}

        Experi√™ncia Profissional 4 na empresa: {info_experiencia_empresa4}
        com a fun√ß√£o de: {info_experiencia_funcao4} e no per√≠do de: {info_experiencia_tempo4}

        Experi√™ncia Profissional 5 na empresa: {info_experiencia_empresa5}
        com a fun√ß√£o de: {info_experiencia_funcao5} e no per√≠do de: {info_experiencia_tempo5}

        E agora crie um curr√≠culo profissional e bem formal com base nesses dados.
        Siga a ordem abaixo:
        Nome ser√° como cabe√ßalho e ter√° a Fonte bem grande, e um alinhamento centralizado.
        Dados pessoais ter√£o alinhamento centralizado.
        Profiss√£o ter√£o alinhamento centralizado.
        Resumo
        Forma√ß√£o ou escolaridade
        Cursos
        Experi√™ncia Profissional

        Caso exista alguma informa√ß√£o n√£o inclu√≠da, voc√™ pode incluir.

        """,
        description="Agente gera um curr√≠culo padr√£o baseado nas informa√ß√µes passadas pelo usu√°rio",
        tools=[google_search]
    )

    entrada_do_cadastro_curriculo = f"T√≥pico: {info_nome} {info_profissao}\nData de hoje: {data_de_hoje}"
    cadastro = call_agent(cadastro_curriculo, entrada_do_cadastro_curriculo)

    return cadastro

################################################
# --- Agente 2: criar arquivo docx --- #
################################################
def agente_criar_docx(info_nome,info_idade,info_endereco,info_email,
info_telefone,info_profissao,info_formacao,info_cursos,
info_experiencia_empresa1,info_experiencia_funcao1,info_experiencia_tempo1,
info_experiencia_empresa2,info_experiencia_funcao2,info_experiencia_tempo2,
info_experiencia_empresa3,info_experiencia_funcao3,info_experiencia_tempo3,
info_experiencia_empresa4,info_experiencia_funcao4, info_experiencia_tempo4,
info_experiencia_empresa5,info_experiencia_funcao5,info_experiencia_tempo5,
curriculo_cadastrado, data_de_hoje):

    # Inserir as instru√ß√µes do Agente Planejador #################################################

    with open('texto-canvas.docx', 'w')as arquivo:
      arquivo.write(curriculo_cadastrado)
    print("Arquivo texto.canvas.docx criado");

    docxcriador = Agent(
        name="agente_criar_docx",
        model="gemini-2.0-flash",
        instruction=f"""
        """,
        description="Agente que cria docx",
    )
    entrada_criar_docx = f"Curr√≠culo do {info_nome} {info_profissao} \nDOCX criado: {curriculo_cadastrado}"
    # Executa o agente
    criar_docx = call_agent(docxcriador, entrada_criar_docx)
    return criar_docx

#####################################################################
# --- Agente 3: Buscador de Vagas com impress√£o de arquivo DOCX --- #
#####################################################################
def agente_buscador_de_vagas(info_nome,info_endereco,info_profissao,
      curriculo_cadastrado, data_de_hoje):

    buscador_de_vagas = Agent(
        name="agente_buscador_de_vagas",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um especialista em pesquisa de vagas de emprego.
        A sua tarefa √©:
        1 - Com a ferramenta(google_search) buscar vagas de emprego abertas nas empresas no periodo pr√≥ximo da data de {data_de_hoje},
        na profiss√£o de {info_profissao} e com prefer√™ncia no estado do endere√ßo{info_endereco}
        que mais se aproximam das qualidades informadas no curr√≠culo {curriculo_cadastrado}.

        2 - Liste todas as vagas ordenadas pela vaga aberta na data mais recente, com nome da empresa, url do site, link de inscri√ß√£o.

        Caso exista alguma informa√ß√£o n√£o inclu√≠da, voc√™ pode incluir.

        """,
        description="Agente lista informa√ß√£o de vagas abertas",
        tools=[google_search]
    )

    entrada_do_buscador_de_vagas = f"Buscador de vagas para: {info_nome} {info_profissao}\nBuscador de vagas: {agente_buscador_de_vagas}"
    # Executa o agente
    buscador = call_agent(buscador_de_vagas, entrada_do_buscador_de_vagas)

    with open('buscador_de_vagas.docx', 'w')as arquivo:
      arquivo.write(buscador)
    print("""
    \n--- üìù Criado Arquivo .DOCX com Lista de Vagas ---\n

            buscador_de_vagas.docx criado

      ----------------------------------------------------
            """);

    return buscador

data_de_hoje = date.today().strftime("%d/%m/%Y")

print(""" üöÄüöÄüöÄ Iniciando o Sistema de Cria√ß√£o de Curr√≠culos com 3 Agentes üöÄüöÄüöÄ

    üöÄObs: Caso o campo n√£o seja (Obrigat√≥rio), click [ENTER] para seguir nos pr√≥ximos campos!!! üöÄ
      """)
# --- Obter Informa√ß√µes do Usu√°rio ---

info_nome = input("‚ùì(Obrigat√≥rio) Por favor, digite o seu Nome Completo: ")
info_idade = input("‚ùì (Obrigat√≥rio) Por favor, digite a sua idade (Somente N√∫meros): ")
info_endereco = input("‚ùì(Obrigat√≥rio) Por favor, digite o seu endere√ßo: ")
info_email = input("‚ùì Por favor, digite o seu email: ")
info_telefone = input("‚ùì Por favor, digite o seu telefone com DDD: ")
info_profissao = input("‚ùì(Obrigat√≥rio) Por favor, digite a profiss√£o que atua ou deseja atuar: ")
info_formacao = input("‚ùì (Obrigat√≥rio) Por favor, digite a sua forma√ß√£o ou n√≠vel de escolaridade: ")
info_cursos = input("‚ùì Por favor, informe seus cursos: ")
info_experiencia_empresa1 = input("‚ùìExperi√™ncia 1 : Por favor, digite a o nome da √∫ltima empresa ou atual: ")
info_experiencia_funcao1 = input("‚ùì Experi√™ncia 1 : Por favor, digite o nome da fun√ß√£o: ")
info_experiencia_tempo1 = input("‚ùì Experi√™ncia 1 : Por favor, digite o tempo na fun√ß√£o: ")
info_experiencia_empresa2 = input("‚ùìExperi√™ncia 2: Por favor, digite o nome da √∫ltima empresa ou atual: ")
info_experiencia_funcao2 = input("‚ùì Experi√™ncia 2: Por favor, digite o nome da fun√ß√£o: ")
info_experiencia_tempo2 = input("‚ùì Experi√™ncia 2: Por favor, digite o tempo na fun√ß√£o: ")
info_experiencia_empresa3 = input("‚ùìExperi√™ncia 3 : Por favor, digite o nome √∫ltima empresa ou atual: ")
info_experiencia_funcao3 = input("‚ùì Experi√™ncia 3: Por favor, digite o nome da fun√ß√£o: ")
info_experiencia_tempo3 = input("‚ùì Experi√™ncia 3: Por favor, digite o tempo na fun√ß√£o: ")
info_experiencia_empresa4 = input("‚ùìExperi√™ncia 4: Por favor, digite o nome da √∫ltima empresa ou atual: ")
info_experiencia_funcao4 = input("‚ùì Experi√™ncia 4: Por favor, digite o nome da fun√ß√£o: ")
info_experiencia_tempo4 = input("‚ùì Experi√™ncia 4: Por favor, digite o tempo na fun√ß√£o: ")
info_experiencia_empresa5 = input("‚ùìExperi√™ncia 5: Por favor, digite o nome da empresa anterior: ")
info_experiencia_funcao5 = input("‚ùì Experi√™ncia 5: Por favor, digite o nome da fun√ß√£o: ")
info_experiencia_tempo5 = input("‚ùì Experi√™ncia 5: Por favor, digite o tempo na fun√ß√£o: ")

# L√≥gica do sistema de agentes ################################################
if not info_nome:
    print(" OPs!  Voc√™ esqueceu de digitar o seu nome!")
if not info_idade:
    print(" OPs!  Voc√™ esqueceu de digitar o sua idade!")
if not info_endereco:
    print(" OPs!  Voc√™ esqueceu de digitar o seu endere√ßo!")
if not info_profissao:
    print(" OPs!  Voc√™ esqueceu de digitar a sua profiss√£o ou cargo que deseja atuar!")
if not info_formacao:
    print(" OPs!  Voc√™ esqueceu de digitar a forma√ß√£o ou escolaridade!")
else:
    print(f"Maravilha! Vamos ent√£o criar um curr√≠culo sobre o {info_nome} na profiss√£o de {info_profissao}")

    # Agente para Cadastro de Curr√≠culo ################################################
    curriculo_cadastrado = agente_cadastro_curriculo(info_nome,info_idade,info_endereco,info_email,
      info_telefone,info_profissao,info_formacao,info_cursos,
      info_experiencia_empresa1,info_experiencia_funcao1,info_experiencia_tempo1,
      info_experiencia_empresa2,info_experiencia_funcao2,info_experiencia_tempo2,
      info_experiencia_empresa3,info_experiencia_funcao3,info_experiencia_tempo3,
      info_experiencia_empresa4,info_experiencia_funcao4, info_experiencia_tempo4,
      info_experiencia_empresa5,info_experiencia_funcao5,info_experiencia_tempo5,
                                                     data_de_hoje)
    print("\n--- üìù Resultado do cadastro curricular 1 (cadastro) ---\n")
    display(to_markdown(curriculo_cadastrado))
    print("--------------------------------------------------------------")

    print("\n--- üìù Resultado do cria√ß√£o do docx 2 (docx) ---\n")

    # Agente para Cria√ß√£o de Arquivo DOCX ################################################
    criar_docx = agente_criar_docx(info_nome,info_idade,info_endereco,info_email,
      info_telefone,info_profissao,info_formacao,info_cursos,
      info_experiencia_empresa1,info_experiencia_funcao1,info_experiencia_tempo1,
      info_experiencia_empresa2,info_experiencia_funcao2,info_experiencia_tempo2,
      info_experiencia_empresa3,info_experiencia_funcao3,info_experiencia_tempo3,
      info_experiencia_empresa4,info_experiencia_funcao4, info_experiencia_tempo4,
      info_experiencia_empresa5,info_experiencia_funcao5,info_experiencia_tempo5,
      curriculo_cadastrado, data_de_hoje)

    #display(to_markdown(criar_docx))
    print("--------------------------------------------------------------")

    # Agente para buscar vagas e emitir DOCX da lista ################################################
    buscar_vagas = agente_buscador_de_vagas(info_nome,info_endereco,info_profissao,
      curriculo_cadastrado, data_de_hoje)
    print("\n--- üìù Resultado do buscador de vagas 3 (docx) ---\n")
    display(to_markdown(buscar_vagas))
    print("--------------------------------------------------------------")

    # FIM - SISTEMA AGENTE HELP CURR√çCULOS ################################################